from ape import accounts, project 



# test image 
img = "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"
mime_type = "image/png"


def main():
    account = accounts.test_accounts[0]
    print(f"using address {account.address}")
    storage_contract = account.deploy(project.OnchainImg, sender=account)
    print(f"onchain storage deployed at address: {storage_contract.address}")
    print("Uploading img to contract ")
    img_id = storage_contract.addImage(mime_type, img,  sender=account)
    img_id = img_id.return_value
    print(f"img id {img_id}")
    # print("Uploading img to contract ")
    # img_id = storage_contract.addImage(mime_type, img, sender=account)
    # img_id = img_id.return_value
    # print(f"img id {img_id}")
    
    nft_contract = account.deploy(project.NFTWithOnchainImg, storage_contract.address,  sender=account)

    #  mintNFT(address to, uint256 imageId)
    print(f"nft deployed at address: {nft_contract}")
    nft = nft_contract.mintNFT(account.address,img_id, sender=account )
